#!/usr/bin/env python3

# region copyright
# Copyright 2023 NVIDIA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# endregion

import os

import click

from python.config import c as config
from python.utils import (
    colorize_info,
    colorize_prompt,
    colorize_result,
    colorize_error,
    deployments,
    format_app_name,
    read_tf_output,
    shell_command,
)

APP_NAMES = [
    "isaac",
]


@click.command()
@click.option(
    "--debug/--no-debug",
    default=False,
    show_default=True,
)
@click.option(
    "--deployment-name",
    type=click.Choice(deployments()),
    default=(deployments()[0] if len(deployments()) > 0 else ""),
    prompt=colorize_prompt("Deployment name."),
)
@click.argument(
    "deployment_name",
    required=False,
)
@click.option(
    "--app",
    default="all",
    type=click.Choice(["all"] + APP_NAMES),
    help="Application.",
)
@click.argument(
    "app",
    required=False,
)
def main(
    app: str,
    debug: bool,
    deployment_name: str,
):
    # TODO: check login

    # cleck what cloud is deployment for
    cloud = read_tf_output(deployment_name, "cloud", verbose=debug)

    if cloud not in ["azure"]:
        click.echo(
            colorize_error(f"* Stop/start is not yet supported for {cloud.upper()}.")
        )
        exit(1)

    # go through apps

    apps = APP_NAMES if app == "all" else [app]

    for app_name in apps:
        vm_id = read_tf_output(deployment_name, f"{app_name}_vm_id", verbose=debug)

        click.echo(colorize_info(f"* Stopping {format_app_name(app_name)} VM..."))

        if vm_id in ["NA", ""]:
            # show "not found" message if:
            # - app is explicitly specified
            # - debug is enabled
            if app != "all" or debug:
                click.echo(colorize_info(f"* No {format_app_name(app_name)} VM found"))
            continue

        # stop VM
        shell_command(
            f"az vm deallocate --ids {vm_id}",
            verbose=debug,
            exit_on_error=True,
            capture_output=False,
        )

        extra_info = ""
        if cloud == "azure":
            extra_info = "\n- On Azure stopped VMs still count towards your quota."

        click.echo(
            colorize_result(
                f"* {format_app_name(app_name)} VM stopped."
                + "\n- You may still be billed some amount for persistent storage and network resources."
                + extra_info
            )
        )


if __name__ == "__main__":
    main()
