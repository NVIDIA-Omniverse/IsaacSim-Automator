#!/usr/bin/env python3

# region copyright
# Copyright 2023 NVIDIA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# endregion


import os
import sys

import click

from src.python.config import c as config
from src.python.utils import (
    colorize_error,
    colorize_info,
    deployments,
    format_app_name,
    read_tf_output,
    shell_command,
)

APP_NAMES = ["isaac"]


# callback to validate deployment name
def deployments_callback(ctx, param, value):
    if (value is None) or (value not in deployments()):
        click.echo(
            colorize_error(
                f'Invalid deployment name "{value}". Must be one of: [{", ".join(deployments())}].'
            )
        )
        ctx.abort()
    return value


@click.command()
@click.option(
    "--debug/--no-debug",
    default=False,
    show_default=True,
)
@click.argument(
    "deployment_name",
    required=True,
    type=str,
    callback=deployments_callback,
)
@click.option(
    "--app",
    default="isaac",
    type=click.Choice(APP_NAMES),
    help="Application",
)
def main(
    app: str,
    debug: bool,
    deployment_name: str,
):
    vm_ip = read_tf_output(deployment_name, f"{app}_ip", verbose=debug)

    if vm_ip in ["NA", ""]:
        click.echo(
            colorize_info(
                f'* No {format_app_name(app)} VM found for "{deployment_name}" deployment.'
            )
        )
        raise click.Abort()

    shell_command(
        f"ssh -o StrictHostKeyChecking=no ubuntu@{vm_ip} "
        + f"-i {config['state_dir']}/{deployment_name}/key.pem",
        verbose=True,
    )


if __name__ == "__main__":
    if os.path.exists("/.dockerenv"):
        # we're in docker, run command
        main()
    else:
        # we're outside, start docker container first
        shell_command(f"./run '{' '.join(sys.argv)}'", verbose=True)
